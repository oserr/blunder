#pragma once

namespace blunder {

// Precomputed magic numbers for bishop attacks.
inline constexpr std::array<BitBoard, 64> kBishopMagics = {
  0x8082082208021000, 0x91040122400040, 0x1005040408120040,
  0x2081e0006000803, 0x29940000100800, 0x4024024640089801,
  0x800809010112000, 0x260200590c0042, 0x221900410842000,
  0x1400e00c00808804, 0x200a0880480842, 0x10822080011426,
  0x1021022001000208, 0x6011029008040, 0x400c005110100008,
  0x8000004a09010100, 0x4051004082084108, 0x801810018,
  0x4020001110408000, 0x2000000c6008004, 0x4509010a004,
  0x8000200802091020, 0x9000304018c010c, 0x884000444852000,
  0x40002d8004862000, 0x1004510422020001, 0xb0010058480000,
  0x1100002821030000, 0x200001001210000, 0x80000849c4010002,
  0x100005220620d009, 0x20002010920802c, 0x8080508841100090,
  0x200480a20049003, 0x2180041028a20280, 0x9310000442420000,
  0x100002408605014, 0x10410220000, 0x960408020000e02a,
  0xc00828810000200a, 0x50886c804080040, 0x80041043004401,
  0xa0308289000000, 0xe840028221020000, 0x700122000000,
  0x22021280440000, 0x860080101520002, 0x20094844488100,
  0x4083802100c0604, 0x9000062801081060, 0x1000610041500001,
  0x200404000452000, 0x8008220410010, 0x80a066540410,
  0x2690048c92ba, 0x500101003000, 0x80800a0804040294,
  0x50000090841090, 0x3000040825084800, 0xa004880844014400,
  0x20400601020220, 0x50030a022200, 0x214003044108090,
  0x9c808002448,
};

// Precomputed magic numbers for rook attacks.
inline constexpr std::array<BitBoard, 64> kRookMagics = {
  0x880108000204004, 0x4940100020400000, 0x4100801600000,
  0x82000a0040042000, 0x2500020800850000, 0x8040020001004000,
  0x14801a0001008000, 0x8008800d0220400, 0x840300810180001,
  0x41402000400010, 0xc008802082140005, 0x88030000a2000,
  0x800800840000, 0x8088040010402000, 0x20024a1042a0400,
  0x4020098d014000, 0x200018001218052, 0x8000216000880005,
  0x81000c94000, 0x2000002890040000, 0x8029110008010000,
  0x4844020006001400, 0x10105000a001400, 0x2020000410400,
  0x10001000a0008021, 0x1200110900400010, 0x200048010580000,
  0x2000008c04080000, 0x4204001400482000, 0x82800040012020c,
  0x88c000a02020001, 0x400000014002009c, 0x4100082008400000,
  0xc0200a0010000e, 0x1800001102900020, 0x8000001021000800,
  0xc11102004004000, 0x2800012408000a04, 0xa800008184001000,
  0x481104020090000, 0x200104821250000, 0x101114020818008,
  0x4000201008004020, 0xb80240000, 0x2010001008010000,
  0x8a0002400040800, 0x2000090044028000, 0x8020005000906000,
  0x8001140a10c0c00, 0x4000002101004140, 0x8014006400,
  0x4c4040820844400, 0x10500004a4084c00, 0xb028001e08100400,
  0x2000002240010090, 0x1088044010, 0x9080140102308024,
  0x80008040001121, 0xc341a0096, 0x800000810782044,
  0x2890010d40140004, 0x200004a002b028, 0x5000020a802050c,
  0x1004000881204c02,
};

constexpr std::array<int, 64> kRookShifts = {
  12, 11, 11, 11, 11, 11, 11, 12,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  12, 11, 11, 11, 11, 11, 11, 12
};

constexpr std::array<int, 64> kBishopShifts = {
  6, 5, 5, 5, 5, 5, 5, 6,
  5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 7, 7, 7, 7, 5, 5,
  5, 5, 7, 9, 9, 7, 5, 5,
  5, 5, 7, 9, 9, 7, 5, 5,
  5, 5, 7, 7, 7, 7, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5,
  6, 5, 5, 5, 5, 5, 5, 6
};

} // namespace blunder
