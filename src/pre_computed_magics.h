#pragma once

namespace blunder {

// Precomputed magic numbers for bishop attacks.
inline constexpr std::array<BitBoard, 64> kBishopMagics = {
  0x802901025030020, 0x2883808808003, 0x21020082100c42,
  0x280a4100000020, 0x4484504080a81302, 0x6004822062000000,
  0x800880411042002, 0x840d42101410, 0x2004886004240040,
  0x1082044404040420, 0x8881a14800818802, 0x442506000200,
  0x70000c50411000a8, 0x8800070120124890, 0x18860609044000,
  0x218448084425, 0x6008821220084483, 0x11280041c940400,
  0x1050010808202222, 0x4084100802400820, 0x2002121401200400,
  0x10a030048060800, 0x41232400880440, 0x5244220200a20830,
  0x404408020f90100, 0x10081002082100, 0xc04100041024880,
  0x8808080004202060, 0x4840008802002, 0x400200100a000,
  0x4084008a80410, 0x800841002080a808, 0x8201002080200,
  0x48040302044800, 0x902002880100280, 0x2408040402180210,
  0x80410040040040, 0x850a4081000a0040, 0x4004080058008400,
  0xc608810114004400, 0x6102220100a00, 0x2005080884000240,
  0x8000220030004200, 0x3000804208000083, 0x800084100408400,
  0x20810008b0300, 0x208011152000408, 0x8410121a08400020,
  0x624010108210020, 0x808401a00024, 0x20082084108001,
  0x204080042020801, 0x4006803410442280, 0x104204441a20420,
  0x41080811004082, 0x20a0088608424000, 0x2008084012080,
  0x4c0c04042701000, 0x2202100c9400a804, 0x101840400208800,
  0x106e4020443400, 0x4142104520041108, 0x1002880901080200,
  0x5215001010100
};

// Precomputed magic numbers for rook attacks.
inline constexpr std::array<BitBoard, 64> kRookMagics = {
  0x280018040026050, 0x40200010004004, 0x100110008200040,
  0x480058010000801, 0x200040200201008, 0xc180098002000400,
  0x40008104a050484, 0x1000030804a0100, 0x800080204014,
  0x4801002080400100, 0x1111004610200100, 0x100200c100100,
  0x2000800400800800, 0x1c00800200040081, 0x4000110129418,
  0xa00004900841a, 0x98000c02000400a, 0x90004000200040,
  0x90002004002800, 0x88808008001004, 0xc000828008002400,
  0x104004002004100, 0x2080040001021008, 0x200020000840061,
  0x80004040002000, 0x4122200980400080, 0xa008200401023,
  0x29500180080080, 0x4080080800400, 0x422000200081004,
  0x1541000100020004, 0x9800080204100, 0x880004000402002,
  0x4090004000402000, 0x10200041001102, 0x40090021001000,
  0x2000040082800800, 0x800400800200, 0x40010844001002,
  0x32004102000084, 0x20208040008000, 0x402010004000,
  0x80410020010010, 0x222124022020008, 0x204050008010010,
  0x401041040080120, 0x42882210240001, 0x100008400620001,
  0x2105c0800500, 0x4000805022010200, 0x2080401a0200,
  0x1002402012000a00, 0x2120080080040080, 0x110800200040080,
  0x423000200840100, 0x1a008041040200, 0x604a08000459501,
  0x4200110080204001, 0xc844800840120022, 0x12882004100101,
  0x21000800041043, 0x201000400080201, 0xc000080100d21004,
  0x184488841040022,
};

constexpr std::array<int, 64> kRookShifts = {
  12, 11, 11, 11, 11, 11, 11, 12,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  12, 11, 11, 11, 11, 11, 11, 12
};

constexpr std::array<int, 64> kBishopShifts = {
  6, 5, 5, 5, 5, 5, 5, 6,
  5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 7, 7, 7, 7, 5, 5,
  5, 5, 7, 9, 9, 7, 5, 5,
  5, 5, 7, 9, 9, 7, 5, 5,
  5, 5, 7, 7, 7, 7, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5,
  6, 5, 5, 5, 5, 5, 5, 6
};

} // namespace blunder
